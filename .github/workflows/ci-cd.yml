name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Frontend Tests and Build
  frontend-test:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run type checking
      run: npx tsc --noEmit
      
    - name: Build application
      run: npm run build
      env:
        API_URL: http://localhost:8000
        NEXT_PUBLIC_API_URL: http://localhost:8000
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: .next/
        retention-days: 1

  # Backend Tests and Validation
  backend-test:
    name: Backend Tests & Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('api/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        cd api
        pip install -r requirements.txt
        
    - name: Run Python linting
      run: |
        cd api
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Test API startup
      run: |
        cd api
        timeout 10s uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 5
        curl -f http://localhost:8000/ || exit 1
        
    - name: Test API endpoints
      run: |
        cd api
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 5
        # Test health endpoint
        curl -f http://localhost:8000/
        # Test analyze endpoint with empty files (should return 400)
        curl -X POST http://localhost:8000/analyze \
          -H "Content-Type: application/json" \
          -d '{"files": []}' \
          -w "%{http_code}" | grep -q "400"

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Railway (Backend)
  deploy-backend:
    name: Deploy Backend to Railway
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Railway CLI
      run: npm install -g @railway/cli
      
    - name: Deploy to Railway
      run: railway up --service ${{ secrets.RAILWAY_SERVICE_ID }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      working-directory: ./api

  # Deploy to Vercel (Frontend)
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan, deploy-backend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

  # Integration Tests (Post-Deployment)
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Test Backend Health
      run: |
        curl -f ${{ secrets.RAILWAY_BACKEND_URL }}/ || exit 1
        
    - name: Test Frontend Health
      run: |
        curl -f ${{ secrets.VERCEL_FRONTEND_URL }} || exit 1
        
    - name: Test API Integration
      run: |
        # Test that frontend can reach backend
        response=$(curl -s -X POST ${{ secrets.RAILWAY_BACKEND_URL }}/analyze \
          -H "Content-Type: application/json" \
          -d '{"files": []}' \
          -w "%{http_code}")
        if [[ "$response" != *"400"* ]]; then
          echo "API integration test failed"
          exit 1
        fi

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify Success
      if: needs.integration-test.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        echo "Frontend: ${{ secrets.VERCEL_FRONTEND_URL }}"
        echo "Backend: ${{ secrets.RAILWAY_BACKEND_URL }}"
        
    - name: Notify Failure
      if: needs.integration-test.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        exit 1
